// *
// * Erdmann & Freunde - Nutshell
// * BASE Contao Framework
// * erdmann-freunde.de/nutshell/
// *
// * Lizenziert unter MIT OPEN SOURCE 
// *

//
// BASE/GRID
// --------------------------------------------------

// VARIABLES
$grid__columns:       12 !default;
$grid__gutter:        1.875rem !default; // 30px
$grid__gutter--half:  ($grid__gutter / 2) !default;

// USED FROM _responsive.scss
$breakpoints: (
  xs: (
    min:        0,
    max:        (34.375em - 0.0625em), // 549px
  ),
  sm: (
    min:        34.375em, // 550px
    max:        (48em - 0.0625em), // 767px
  ),
  md: (
    min:        48em, // 768px
    max:        (58.75em - 0.0625em), // 939px
  ),
  lg: (
    min:        58.75em, // 940px
    max:        (68.75em - 0.0625em), // 1099px
  ),
  xl: (
    min:        68.75em, // 1100px
    max:        "none"
  ),
) !default;

// MIXINS & PLACEHOLDER

@mixin make-row($column__gutter--half: $grid__gutter--half) {
  @extend %clearfix;
  
  margin-left:  $column__gutter--half * -1;
  margin-right: $column__gutter--half * -1;
}

@mixin media-query($mq, $mq-max: false) {

  $breakpoint-found: false;

  // Loop through the list of breakpoints we’ve provided in our settings file.
  @each $breakpoint, $screen in $breakpoints {

    // Grab the alias and the condition from their respective locations in
    // the list.
    
    // min-width
    $size:      $breakpoint; // (xs)
    
    $alias-min:     "screen-#{$size}"; // (screen-xs)
    $alias-max:     "screen-#{$size}-max"; // (screen-xs-max)
    $condition-min: map-get($screen, min);
    $condition-max: map-get($screen, max);
    
    //@warn "mq: #{$mq}";
    
    //@warn "size: #{$size}, alias: #{$alias-min} - #{$alias-max}, condition: #{$condition-min} #{$condition-max}";
    
    
    // If the media query we’ve specified has an alias and a condition...
    @if $mq == $alias-min and $mq-max == false {

      // ...tell the mixin that we’ve found it...
      $breakpoint-found: true;

      // ...and spit it out here.
      @media screen and (min-width: #{$condition-min}) {
        @content;
      }
    }
    @if $mq == $alias-max {
      // ...tell the mixin that we’ve found it...
      $breakpoint-found: true;

      // ...and spit it out here.
      @media screen and (max-width: #{$condition-max}) {
        @content;
      }
    }
    @if ($mq == $alias-min and $mq-max == $alias-max)  {
      // ...tell the mixin that we’ve found it...
      $breakpoint-found: true;

      // ...and spit it out here.
      @media screen and (min-width: #{$condition-min}) and (max-width: #{$condition-max}) {
        @content;
      }
    }
  }

  // If the user specifies a non-exitent alias, send them a warning.
  @if $breakpoint-found == false{
      @warn "Arrr! Breakpoint ‘#{$mq}’ existiert nicht."
  }
}

%column-floating {
  float: left;
  padding-left:  $grid__gutter--half;
  padding-right: $grid__gutter--half;
  width: 100%;
}

%clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// --------------------------------------------------

// general row-class
.row {
  @include make-row;
}

// [1] length($breakpoints) - go through length of available viewports (xs, sm, md, lg, xl == 5)
// [2] $current - actual viewport (e.g. "xs")
// [3] $i - counter, returns the actual grid-column
// [4] $grid__columns - go through available columns (e.g. 1 --> 12)

// [5] override clear- class for the next viewport by default
// this means, you can add a clear-xs class to an element, but the clear will only affect the current viewport.  
@for $size from 1 through length($breakpoints) { // [1]
  $x:   nth($breakpoints, $size); // [2]
  $current:   nth($x, 1); // [2]
  // @warn "Item: #{length($breakpoints)}, Current: #{$current}";

  // column creation
  @for $i from 1 through $grid__columns { // [3][4]
    .col-#{$current}-#{$i} { // [2][3]
      @extend %column-floating;
    }
  }
  
  // width creation for every col- class
  @include media-query(screen-#{$current}) { // [2]

  	@for $i from 1 through $grid__columns { // [3][4]
  		.col-#{$current}-#{$i} { // [2][3]
  			width: percentage($i / $grid__columns);
  		}
  	}
  }
  
  // offset creation
  @include media-query(screen-#{$current}) { // [2]
  
  	@for $i from 0 through ($grid__columns - 1) { // [3]
  		.offset-#{$current}-#{$i} { // [2][3]
  			margin-left: percentage($i / $grid__columns);
  		}
  	}
  }
  
  //pull-left & -right creation
  @include media-query(screen-#{$current}) { // [2]
    .pull-right-#{$current} { // [2]
      float: right;
    }
    
    .pull-left-#{$current} { // [2]
      float: left;
    }
  }
  
  //clear creation  
  @include media-query(screen-#{$current}) { // [2]
    .clear-#{$current} { // [2]
      clear: both;
    }
  }
  
  // [5]
  @if($size < length($breakpoints)) {
    $size: $size + 1;
    $x:   nth($breakpoints, $size);
    $next:      nth($x, 1);
    
    // clear-#{$next}
    @include media-query(screen-#{$next}) {
      .clear-#{$current} {
        clear: none;
      }
    }
  }
}
